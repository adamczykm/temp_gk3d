#version 330 core

// in
layout(location = 0) in vec3 v_position_model;
layout(location = 1) in vec3 v_normal_model;

// out
out vec3 position_world;
out vec3 normal_camera;
out vec3 eyedir_camera;
out vec3 lightdir_camera;


uniform mat4 V;
uniform mat4 M;
uniform vec3 lightpos_world;

void main(){
  mat4 MV = V * M;
  vec3 position_camera = ( V * M * vec4(v_position_model, 1)).xyz;
  gl_Position = P * position_camera;
  eyedir_camera =  normalize(-position_camera.xyz);
  normal_camera = normalize((MV * vec4(v_normal_model, 0)).xyz);
  lighdir_camera = normalize((V * lightpos_world - position_camera).xyz);

}

// 	PSInput o = (PSInput)0;
// matrix MV = mul(V, M);
// float4 position_camera = float4(i.pos, 1.0f);
// position_camera = mul(MV, position_camera);
// gl_Position = mul(P, position_camera);

// normal_camera = mul(MV, float4(i.norm, 0.0f)).xyz;
// normal_camera = normalize(normal_camera);
// eyedir_camera = normalize(-position_camera.xyz);
// lighdir_camera = normalize((mul(V, lightPos[0]) - position_camera).xyz);
// o.lightVec1 = normalize((mul(V, lightPos[1]) - position_camera).xyz);
// return o;
